---

- name: pxe (pxe_server) | Ensure pxe directories exist
  file:
    dest: "{{ item }}"
    state: directory
  loop:
    - "{{ pxe_root_path }}"
    - "{{ pxe_modules_path }}"
    - "{{ pxe_root_path + '/pxelinux.cfg' }}"
  notify:
    - restart tftpd
  delegate_to: "{{ _pxe_server }}"

- name: pxe (pxe_server) | Install pxelinux packages from OS or..
  package:
    name:
      - 'pxelinux'
      - 'syslinux-common'
    state: present
  when: _syslinux_pkg.version == 'os'
  delegate_to: "{{ _pxe_server }}"

- block:
    - name: pxe (pxe_server) | Ensure user_dist directories exist
      file:
        dest: "{{ user_dist_dir }}"
        state: directory

    - name: pxe (pxe_server) | Download syslinux version archive
      get_url:
        url:  "{{ _syslinux_pkg.url }}"
        dest: "{{ _syslinux_pkg.archive_file }}"
        force: "{{ force_overwrite }}"
      register: syslinux_version_download

    - name: pxe (pxe_server) | Unpack syslinux version archive
      unarchive:
        src:  "{{ _syslinux_pkg.archive_file }}"
        dest: "{{ _syslinux_pkg.extract_dir }}"
        remote_src: yes
        creates: >-
          {{ ( force_overwrite or syslinux_version_download.changed )
              | ternary(file_does_not_exist, _syslinux_pkg.archive_dir + '/README')
          }}

  when: _syslinux_pkg.version != 'os'
  delegate_to: "{{ _pxe_server }}"

- block:
    - name: pxe (pxe_server) | Search for syslinux modules to install
      find:
        paths: >-
          {{ item_pathes }}
        patterns:
          - '*.c32'
          - '*.com'
      vars:
        item_pathes: >-
          {{ [_syslinux_pkg.archive_dir]
                | product(syslinux_files[_syslinux_pkg.version].module_dirs)
                | map('join', '/')
                | list
          }}
      register: syslinux_modules_found

    - name: pxe (pxe_server) | Search for syslinux files to install
      stat:
        path: "{{ item }}"
      loop: "{{ item_files }}"
      vars:
        item_files: >-
          {{ [_syslinux_pkg.archive_dir]
                | product(syslinux_files[_syslinux_pkg.version].files)
                | map('join', '/')
                | list
          }}
      register: syslinux_files_found

    - name:
      debug:
        msg: >-
          {{ item.path }}
      loop: "{{ item_files + syslinux_modules_found.files }}"
      vars:
        item_files: >-
          {{ syslinux_files_found.results | map(attribute='stat') | selectattr('exists') | list }}

    - name: pxe (pxe_server) | Copy syslinux modules
      copy:
        src:  "{{ item.path }}"
        dest: "{{ pxe_modules_path + '/' + item.path | basename }}"
        remote_src: yes
      loop: "{{ syslinux_modules.files }}"
      loop: "{{ item_files + syslinux_modules_found.files }}"
      vars:
        item_files: >-
          {{ syslinux_files_found.results | map(attribute='stat') | selectattr('exists') | list }}

  delegate_to: "{{ _pxe_server }}"

- name:
  assert:
    that:
      - 1 == 2







- block:
    - name: pxe (pxe_server) | Install tftpd package
      package:
        name:
          - 'tftpd-hpa'
        state: present

    - name: pxe (pxe_server) | Ensure pxe directories exist
      file:
        dest: "{{ item }}"
        state: directory
      loop:
        - "{{ pxe_root_path }}"
        - "{{ pxe_modules_path }}"
        - "{{ pxe_root_path + '/pxelinux.cfg' }}"
      notify:
        - restart tftpd

    - name: pxe (pxe_server) | Set pxe root directory in tftp server
      lineinfile:
        path: '/etc/default/tftpd-hpa'
        backup: yes
        regexp: '^TFTP_DIRECTORY='
        line: "{{ 'TFTP_DIRECTORY=\"' + pxe_root_path + '\"' }}"
      notify:
        - restart tftpd

    - name: pxe (pxe_server) | Set tftp server listen address
      lineinfile:
        path: '/etc/default/tftpd-hpa'
        backup: yes
        regexp: '^TFTP_ADDRESS='
        line: "{{ 'TFTP_ADDRESS=\"' + hostvars[_pxe_server]._tftp_address + '\"' }}"
      notify:
        - restart tftpd

  delegate_to: "{{ _pxe_server }}"

