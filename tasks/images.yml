---

- block:
    - name: images (localhost) | Create image checksum directories
      file:
        name: "{{ _pxe_os.checksum_dir }}"
        state: directory

    - name: images (localhost) | Download checksum file
      get_url:
        url:  "{{ _pxe_os.checksum_url }}"
        dest: "{{ _pxe_os.checksum_file }}"
        #{{ image_checksum_dir + '/' + item.checksum_url | urlsplit('path') | basename }}
        force: yes

    - name: images (localhost) | Read checksum file
      set_fact:
        _os_img: >-
          {{ { 'name'     : cur_name
             , 'file'     : cur_dest_dir + '/' + cur_name
             , 'file_rel' : _pxe_os.pxe_dir + '/' + cur_name
             , 'type'     : _pxe_os.iso_type
             , 'hash'     : cur_hash
             , 'hash_type': _pxe_os.checksum_type
             , 'url'      : _pxe_os.url + '/' + cur_name
             , 'dest_dir' : cur_dest_dir
             , 'extract_dir': cur_dest_dir + '/' + cur_name | regex_search('^[^.]+(?=\.)')
             , 'os_files' : [_pxe_os.iso_kernel, _pxe_os.iso_initrd] | select('defined') | list
             }
          }}
      vars:
        cur_dest_dir: >-
          {{ pxe_root_path + '/' + _pxe_os.pxe_dir }}
        checksum_data: >-
          {{ lookup('file', _pxe_os.checksum_file) }}
        cur_name: >-
          {{ checksum_data
                | regex_search(_pxe_os.checksum_iso_name_rx, multiline=true)
          }}
        # Hashes are effectively indexed by filenames, thus i need to use
        # (already known from above) filename to find _correct_ row, where to
        # parse hash. Thus, user's 'checksum_rx' should only parse hash from
        # _correct_ row (i.e. it should not bother with identifying correct
        # row). The reason is that to identify correct row in 'checksum_rx'
        # i'll need to use lookahead/lookbehind assertions and then match with
        # hash only. But lookbehind assertions does not allow variable width
        # regexps. Thus, when hash is _after_ filename, it won't be possible
        # in user's 'checksum_rx' to identify correct row at all.
        #
        # On the other hand, in some stupid checksum file formats correct
        # filename may match multiple times, so i select them all. And then
        # user's 'checksum_rx' must match _only one_ of them, so include there
        # some guards against false matches.
        #cur_hash: >-
        #  {{ checksum_data
        #        | regex_findall('^.*\b' + cur_name + '\b.*$', multiline=true)
        #        | map('regex_search', _pxe_os.checksum_rx, multiline=true)
        #        | reject('none')
        #        | list | first
        #  }}
        #
        # Or i may use entire 'checksum_iso_name_rx' to identify correct row
        # using lookahead assertion, and then select entire row. In that case
        # i rely on 'checksum_iso_name_rx' to match only _single_ row of
        # checksum file.
        cur_hash: >-
          {{ checksum_data
                | regex_search('^(?=.*' + _pxe_os.checksum_iso_name_rx + ').*$', multiline=true)
                | regex_search(_pxe_os.checksum_rx, multiline=true)
          }}

    - name: images | Show OS image definitions
      debug:
        var: _os_img

    - name: images | Define pxe kernel and initrd
      set_fact:
        _pxe_os: >-
          {{  { 'pxe_kernel' : _pxe_os.pxe_dir + '/' + _pxe_os.iso_kernel | basename
                                  if _pxe_os.iso_kernel is defined
                                  else 'huy'
              , 'pxe_initrd' : _pxe_os.pxe_dir + '/' + _pxe_os.iso_initrd | basename
                                  if _pxe_os.iso_initrd is defined
                                  else _os_iso.file_rel
              , 'pxe_append' : 'iso raw' if _pxe_os.iso_type == 'raw' else ''
              } | combine(_pxe_os)
          }}

    - name: images | Show final pxe OS definition
      debug:
        var: _pxe_os

  delegate_to: localhost

- block:
    - name: images (pxe_server) | Create image directory
      file:
        name: "{{ _os_img.dest_dir }}"
        state: directory

    - name: image (pxe_server) | Stat image
      stat:
        path: "{{ _os_img.file }}"
        checksum_algorithm: "{{ _os_img.hash_type }}"
        get_checksum: true
      register: iso_file_stats

    - name: images (pxe_server) | Download image
      get_url:
        url:  "{{ _os_img.url }}"
        dest: "{{ _os_img.file }}"
        checksum: "{{ _os_img.hash_type + ':' + _os_img.hash }}"
        force: true
      when: force_overwrite
            or not iso_file_stats.stat.exists
            or iso_file_stats.stat.checksum != _os_img.hash
      register: iso_file_download

    - block:
        - name: images (pxe_server) | Extract kernel and initrd from iso
          iso_extract:
            image:  "{{ _os_img.file }}"
            dest:   "{{ _os_img.dest_dir }}"
            files:  "{{ _os_img.os_files }}"
            force:  true

      when: _os_img.type == 'iso'

    - block:
        - name: images (pxe_server) | Create image archive extract directory
          file:
            name: "{{ _os_img.extract_dir }}"
            state: directory

        - name: images (pxe_server) | Extract image archive
          unarchive:
            src:    "{{ _os_img.file }}"
            dest:   "{{ _os_img.extract_dir }}"
            remote_src: yes
            creates: >-
              {{  ( force_overwrite or iso_file_download.changed )
                  | ternary(file_does_not_exist, _os_img.extract_dir + '/' + _pxe_os.iso_kernel)
              }}

        - name: images (pxe_server) | Copy kernel and initrd from archive
          copy:
            src:    "{{ _os_img.extract_dir + '/' + item }}"
            dest:   "{{ _os_img.dest_dir }}"
            remote_src: yes
          loop: "{{ _os_img.os_files }}"

      when: _os_img.type == 'archive'
      delegate_to: "{{ _pxe_server }}"

    - block:
        - name: images (pxe_server) | Find all images
          find:
            paths: "{{ _os_img.dest_dir }}"
            patterns: "{{ _pxe_os.iso_filename_rx }}"
            file_type: file
            use_regex: true
            recurse: false
          register: image_files

        - name: images (pxe_server) | Delete old images
          file:
            path: "{{ item.path }}"
            state: absent
          when: item.path != _os_img.file
          loop: "{{ image_files.files }}"

  delegate_to: "{{ _pxe_server }}"

