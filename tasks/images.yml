---

- block:
    - name: images (localhost) | Create image checksum directories
      file:
        name: "{{ _pxe_os.checksum_dir }}"
        state: directory

    - name: images (localhost) | Download checksum file
      get_url:
        url:  "{{ _pxe_os.checksum_url }}"
        dest: "{{ _pxe_os.checksum_file }}"
        #{{ image_checksum_dir + '/' + item.checksum_url | urlsplit('path') | basename }}
        force: yes
      register: checksum_file_download

  delegate_to: localhost
  when: inventory_hostname in groups['servers'] and _pxe_os.checksum_url is defined

- block:
    - name: images (localhost) | Read checksum file
      set_fact:
        _os_img_checksum: >-
          {{ { 'name'     : item_name
             , 'hash'     : cur_hash
             , 'hash_type': _pxe_os.checksum_type
             }
          }}
      vars:
        checksum_data: >-
          {{ lookup('file', _pxe_os.checksum_file) }}
        item_name: >-
          {{ checksum_data | regex_search(_pxe_os.checksum_iso_name_rx, multiline=true) }}
        # Hashes are effectively indexed by filenames, thus i need to use
        # (already known from above) filename to find _correct_ row, where to
        # parse hash. Thus, user's 'checksum_rx' should only parse hash from
        # _correct_ row (i.e. it should not bother with identifying correct
        # row). The reason is that to identify correct row in 'checksum_rx'
        # i'll need to use lookahead/lookbehind assertions and then match with
        # hash only. But lookbehind assertions does not allow variable width
        # regexps. Thus, when hash is _after_ filename, it won't be possible
        # in user's 'checksum_rx' to identify correct row at all.
        #
        # On the other hand, in some stupid checksum file formats correct
        # filename may match multiple times, so i select them all. And then
        # user's 'checksum_rx' must match _only one_ of them, so include there
        # some guards against false matches.
        #cur_hash: >-
        #  {{ checksum_data
        #        | regex_findall('^.*\b' + item_name + '\b.*$', multiline=true)
        #        | map('regex_search', _pxe_os.checksum_rx, multiline=true)
        #        | reject('none')
        #        | list | first
        #  }}
        #
        # Or i may use entire 'checksum_iso_name_rx' to identify correct row
        # using lookahead assertion, and then select entire row. In that case
        # i rely on 'checksum_iso_name_rx' to match only _single_ row of
        # checksum file.
        cur_hash: >-
          {{ checksum_data
                | regex_search('^(?=.*' + _pxe_os.checksum_iso_name_rx + ').*$', multiline=true)
                | regex_search(_pxe_os.checksum_rx, multiline=true)
          }}
      when: checksum_file_download.dest is defined

    - name: images | Show OS image checksum information
      debug:
        var: _os_img_checksum

    - name: images (localhost) | Define OS image
      set_fact:
        _os_img: >-
          {{ _os_img_checksum | combine(
              { 'name'     : item_name
              , 'file'     : item_dest_dir + '/' + item_name
              , 'type'     : _pxe_os.iso_type
              , 'url'      : item_url
              , 'dest_dir' : item_dest_dir
              , 'extract_dir': item_dest_dir + '/'
                                  + item_name | regex_search('^(.(?!\.tar\.gz$|\.[^.]+$))+.')
                                  + '-unarchive'
              , 'os_files' : [_pxe_os.iso_kernel]
                               + ( [_pxe_os.iso_initrd]
                                     if _pxe_os.iso_initrd is defined
                                     else []
                                 )
              }
            )
          }}
      vars:
        item_name: >-
          {{ _os_img_checksum.name | default(_pxe_os.url | basename) }}
        item_url: >-
          {{ ( _pxe_os.url + '/' + _os_img_checksum.name )
                if _os_img_checksum.name is defined
                else _pxe_os.url
          }}
        item_dest_dir: >-
          {{ _pxe_root_path + '/' + _pxe_os.pxe_dir }}

    - name: images | Show OS image definitions
      debug:
        var: _os_img

  delegate_to: localhost
  when: inventory_hostname in groups['servers']

- block:
    - name: images (pxe_server) | Install packages for working with images
      package:
        name:
          - 'unzip'
        state: present

    - name: images (pxe_server) | Create image directory
      file:
        name: "{{ _os_img.dest_dir }}"
        state: directory

    - name: image (pxe_server) | Stat image
      stat:
        path: "{{ _os_img.file }}"
        checksum_algorithm: "{{ _os_img.hash_type | default(omit) }}"
        get_checksum: >-
          {{ true if _os_img.hash_type is defined else false }}
      register: iso_file_stats

    - name: images (pxe_server) | Download image
      get_url:
        url:  "{{ _os_img.url }}"
        dest: "{{ _os_img.file }}"
        checksum: >-
          {{ _os_img.hash_type + ':' + _os_img.hash
              if _os_img.hash_type is defined
              else omit
          }}
        force: true
      # FIXME: Defining 'hash_type' and 'hash'
      when: force_overwrite
            or not iso_file_stats.stat.exists
            or ( iso_file_stats.stat.checksum != _os_img.hash
                   if _os_img.hash_type is defined
                   else false
               )
      register: iso_file_download

    - block:
        - name: images (pxe_server) | Extract kernel and initrd from iso
          iso_extract:
            image:  "{{ _os_img.file }}"
            dest:   "{{ _os_img.dest_dir }}"
            files:  "{{ _os_img.os_files }}"
            force:  true

      when: _os_img.type == 'iso'

    - block:
        - name: images (pxe_server) | Create image archive extract directory
          file:
            name: "{{ _os_img.extract_dir }}"
            state: directory

        - name: images (pxe_server) | Extract image archive
          unarchive:
            src:    "{{ _os_img.file }}"
            dest:   "{{ _os_img.extract_dir }}"
            remote_src: yes
            creates: >-
              {{  ( force_overwrite or iso_file_download.changed )
                  | ternary(file_does_not_exist, _os_img.extract_dir + '/' + _pxe_os.iso_kernel)
              }}

        - name: images (pxe_server) | Copy kernel and initrd from archive
          copy:
            src:    "{{ _os_img.extract_dir + '/' + item }}"
            dest:   "{{ _os_img.dest_dir }}"
            remote_src: yes
          loop: "{{ _os_img.os_files }}"

      when: _os_img.type == 'archive'
      delegate_to: "{{ _pxe_server }}"

    - block:
        - name: images (pxe_server) | Find all images
          find:
            paths: "{{ _os_img.dest_dir }}"
            patterns: "{{ _pxe_os.iso_filename_rx }}"
            file_type: file
            use_regex: true
            recurse: false
          register: image_files

        - name: images (pxe_server) | Delete old images
          file:
            path: "{{ item.path }}"
            state: absent
          when: item.path != _os_img.file
          loop: "{{ image_files.files }}"

  when: inventory_hostname in groups['servers']
  delegate_to: "{{ _pxe_server }}"

