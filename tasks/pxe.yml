---

- block:
    - name: pxe (pxe_server) | Install tftpd and pxelinux packages
      package:
        name:
          - 'tftpd-hpa'
          - 'pxelinux'
          - 'syslinux-common'
        state: present

    - name: pxe (pxe_server) | Ensure pxe directories exist
      file:
        dest: "{{ item }}"
        state: directory
      loop:
        - "{{ _pxe_root_path }}"
        - "{{ _pxe_modules_path }}"
        - "{{ _pxe_root_path + '/pxelinux.cfg' }}"
      notify:
        - restart tftpd

    - name: pxe (pxe_server) | Set pxe root directory in tftp server
      lineinfile:
        path: '/etc/default/tftpd-hpa'
        backup: yes
        regexp: '^TFTP_DIRECTORY='
        line: "{{ 'TFTP_DIRECTORY=\"' + _pxe_root_path + '\"' }}"
      notify:
        - restart tftpd

    - name: pxe (pxe_server) | Set tftp server listen address
      lineinfile:
        path: '/etc/default/tftpd-hpa'
        backup: yes
        regexp: '^TFTP_ADDRESS='
        line: "{{ 'TFTP_ADDRESS=\"' + hostvars[_pxe_server]._tftp_address + '\"' }}"
      notify:
        - restart tftpd

    - name: pxe (pxe_server) | Copy pxelinux.0
      copy:
        src:  "{{ item }}"
        dest: "{{ _pxe_root_path + '/' + item | basename }}"
        remote_src: yes
      vars:
        item: '/usr/lib/PXELINUX/pxelinux.0'

    - name: pxe (pxe_server) | Find syslinux modules
      find:
        paths: '/usr/lib/syslinux/modules/bios'
      register: syslinux_modules

    - name: pxe (pxe_server) | Copy syslinux modules
      copy:
        src:  "{{ item.path }}"
        dest: "{{ _pxe_modules_path + '/' + item.path | basename }}"
        remote_src: yes
      loop: "{{ syslinux_modules.files }}"

  delegate_to: "{{ _pxe_server }}"
  tags:
    - install_pxe

# Enforce correct state of kickstart and pxe (pxe_server) host configs: create for hosts in
# `new` group and delete for hosts in `installed` group. Hosts in other groups
# are _ignored_.

- name: pxe (pxe_server) | Ensure pxe menu config directories exist
  file:
    dest:   "{{ item.cfg_d }}"
    state:  directory
  loop: "{{ _pxe_menus.values() }}"
  delegate_to: "{{ _pxe_server }}"
  tags:
    - pxe_host

- block:
    - name: pxe (pxe_server) | Create config for host OS
      template:
        src:  "pxe_os.cfg"
        force:  yes
        backup: yes
        dest: "{{ _pxe_os.pxe_cfg }}"
      when: _pxe_os.gen_pxe_os

    - name: pxe (pxe_server) | Or delete config for host OS, if disabled
      file:
        dest: "{{ _pxe_os.pxe_cfg }}"
        state: absent
      when: not _pxe_os.gen_pxe_os

    - name: pxe (pxe_server) | Create config for new host
      template:
        src:  "pxe_host.cfg"
        force:  yes
        backup: yes
        dest: "{{ _install_conf.pxe_cfg }}"
      when: _install_conf.gen_pxe_host and inventory_hostname in groups['new']

    - name: pxe (pxe_server) | Or delete config for installed host
      file:
        dest: "{{ _install_conf.pxe_cfg }}"
        state: absent
      when: not _install_conf.gen_pxe_host or inventory_hostname in groups['installed']

  when: inventory_hostname in groups['servers']
  delegate_to: "{{ _pxe_server }}"
  tags:
    - pxe_host

- block:
    - name: pxe (pxe_server) | Stat additional files used in pxelinux config
      stat:
        path: "{{ item }}"
      register: addon_pxe_files
      loop:
        - "{{ pxe_menu_font }}"
        - "{{ pxe_splash }}"
      delegate_to: localhost

    - name: pxe (pxe_server) | Copy additional files used in pxelinux config
      copy:
        src:  "{{ item.stat.path }}"
        dest: "{{ _pxe_root_path + '/' + item.stat.path | basename }}"
      when: item.stat.exists
      loop: "{{ addon_pxe_files.results }}"

    - name: pxe (pxe_server) | Generate pxe menus
      assemble:
        src: "{{ item.cfg_d }}"
        regexp: "[0-9]_[^/]+\\.cfg$"
        dest: "{{ _pxe_root_path + '/' + item.cfg }}"
        backup: yes
      loop: "{{ _pxe_menus.values() }}"

    - name: pxe (pxe_server) | Copy additional pxe menus config file
      copy:
        src:  "{{ item }}"
        dest: "{{ _pxe_root_path + '/' + addon_pxe_menus_cfg }}"
      vars:
        item: >-
          {{ lookup('first_found', [addon_pxe_menus_file, 'files/addon_pxe_menus']) }}

    - name: pxe (pxe_server) | Generate main pxelinux config
      template:
        src:  'pxelinux_cfg'
        dest: "{{ _pxe_root_path + '/pxelinux.cfg/default' }}"
        force: yes
        backup: yes

  delegate_to: "{{ _pxe_server }}"
  tags:
    - pxe_host

