---

# Enforce correct state of kickstart and pxe host configs: create for hosts in
# `new` group and delete for hosts in `installed` group. Hosts in other groups
# are _ignored_.

- block:
    - name: pxe | Ensure directories for pxe configs exist
      file:
        dest:   "{{ item }}"
        state:  directory
      loop:
        - "{{ hosts_pxe_menu_cfg_d }}"
        - "{{ _pxe_os.pxe_menu_cfg_d }}"

    - name: pxe | Create config for host OS
      template:
        src:  "pxe_os.cfg"
        force:  yes
        backup: yes
        dest: "{{ _pxe_os.pxe_cfg }}"
      register: pxe_os_added

    - name: pxe | Generate OS menu
      assemble:
        src: "{{ _pxe_os.pxe_menu_cfg_d }}"
        regexp: "[0-9]_[^/]+\\.cfg$"
        dest: >-
          {{ hostvars[_pxe_server].pxe_root_path
              + '/' + hostvars[_pxe_server].pxelinux_incl_dir
              + '/' + _pxe_os.pxe_menu_cfg
          }}
      when: force_overwrite or pxe_os_added.changed

    - name: pxe | Create config for new host
      template:
        src:  "pxe_host.cfg"
        force:  yes
        backup: yes
        dest: "{{ _host_conf.pxe_cfg }}"
      register: pxe_hosts_added
      when: _host_conf.gen_pxe_host and inventory_hostname in groups['new']

    - name: pxe | Or delete config for installed host
      file:
        dest: "{{ _host_conf.pxe_cfg }}"
        state: absent
      register: pxe_hosts_deleted
      when: not _host_conf.gen_pxe_host or inventory_hostname in groups['installed']

    - name: pxe | Generate Hosts menu
      assemble:
        src: "{{ hosts_pxe_menu_cfg_d }}"
        regexp: "[0-9]_[^/]+\\.cfg$"
        dest: >-
          {{ hostvars[_pxe_server].pxe_root_path
              + '/' + hostvars[_pxe_server].pxelinux_incl_dir
              + '/' + hosts_pxe_menu_cfg
          }}
      when: force_overwrite or pxe_hosts_added.changed or pxe_hosts_deleted.changed

    - name: pxe | Add menus to main pxelinux config
      blockinfile:
        marker: '# {mark} bh-auto-install ANSIBLE MANAGED BLOCK'
        state: present
        dest: >-
          {{ hostvars[_pxe_server].pxe_root_path + '/' + hostvars[_pxe_server].pxelinux_cfg }}
        block: |

            MENU BEGIN Hosts
            MENU LABEL ^Hosts
            MENU ROWS 5

            LABEL
                    MENU LABEL ..
                    MENU EXIT

            INCLUDE {{ _host_conf.pxe_menu_cfg }}

            MENU END Hosts

            MENU SEPARATOR

            {% for menu in pxe_menus %}

            MENU BEGIN {{ menu }}
            MENU LABEL ^{{ menu }}
            MENU ROWS 5

            LABEL
                    MENU LABEL ..
                    MENU EXIT

              {% for menu_cfg in pxe_os.values()
                                    | selectattr('pxe_menu', 'equalto', menu)
                                    | map(attribute='pxe_menu_cfg')
                                    | unique %}

            INCLUDE {{ menu_cfg }}

              {% endfor %}

            MENU END {{ menu }}

            {% endfor %}
      vars:
        pxe_menus: >-
          {{ pxe_os.values() | map(attribute='pxe_menu') | unique | list }}

  when: inventory_hostname in groups['servers']
  delegate_to: "{{ _pxe_server }}"

