---

- block:
    - name: pxe | Install tftpd and pxelinux packages
      package:
        name:
          - 'tftpd-hpa'
          - 'pxelinux'
          - 'syslinux-common'
        state: present

    - name: pxe | Ensure pxe directories exist
      file:
        dest: "{{ item }}"
        state: directory
      loop:
        - "{{ hostvars[_pxe_server].pxe_root_path }}"
        - "{{ pxe_modules_path }}"
        - "{{ hostvars[_pxe_server].pxe_root_path + '/pxelinux.cfg' }}"
      notify:
        - restart tftpd

    - name: pxe | Set pxe root directory in tftp server
      lineinfile:
        path: '/etc/default/tftpd-hpa'
        backup: yes
        regexp: '^TFTP_DIRECTORY='
        line: "{{ 'TFTP_DIRECTORY=\"' + hostvars[_pxe_server].pxe_root_path + '\"' }}"
      notify:
        - restart tftpd

    - name: pxe | Set tftp server listen address
      lineinfile:
        path: '/etc/default/tftpd-hpa'
        backup: yes
        regexp: '^TFTP_ADDRESS='
        line: "{{ 'TFTP_ADDRESS=\"' + hostvars[_pxe_server].tftp_address + '\"' }}"
      notify:
        - restart tftpd

    - name: pxe | Copy pxelinux.0
      copy:
        src:  "{{ item }}"
        dest: "{{ hostvars[_pxe_server].pxe_root_path + '/' + item | basename }}"
        remote_src: yes
      vars:
        item: '/usr/lib/PXELINUX/pxelinux.0'

    - name: pxe | Find syslinux modules
      find:
        paths: '/usr/lib/syslinux/modules/bios'
      register: syslinux_modules

    - name: pxe | Copy syslinux modules
      copy:
        src:  "{{ item.path }}"
        dest: "{{ pxe_modules_path + '/' + item.path | basename }}"
        remote_src: yes
      loop: "{{ syslinux_modules.files }}"

  delegate_to: "{{ _pxe_server }}"
  tags:
    - install_pxe

# Enforce correct state of kickstart and pxe host configs: create for hosts in
# `new` group and delete for hosts in `installed` group. Hosts in other groups
# are _ignored_.

- block:
    - name: pxe | Ensure directories for pxe configs exist
      file:
        dest:   "{{ item }}"
        state:  directory
      loop:
        - "{{ hosts_pxe_menu_cfg_d }}"
        - "{{ _pxe_os.pxe_menu_cfg_d }}"

    - name: pxe | Create config for host OS
      template:
        src:  "pxe_os.cfg"
        force:  yes
        backup: yes
        dest: "{{ _pxe_os.pxe_cfg }}"
      register: pxe_os_added

    - name: pxe | Generate OS menu
      assemble:
        src: "{{ _pxe_os.pxe_menu_cfg_d }}"
        regexp: "[0-9]_[^/]+\\.cfg$"
        dest: >-
          {{ hostvars[_pxe_server].pxe_root_path
              + '/' + hostvars[_pxe_server].pxelinux_incl_dir
              + '/' + _pxe_os.pxe_menu_cfg
          }}
      when: force_overwrite or pxe_os_added.changed

    - name: pxe | Create config for new host
      template:
        src:  "pxe_host.cfg"
        force:  yes
        backup: yes
        dest: "{{ _host_conf.pxe_cfg }}"
      register: pxe_hosts_added
      when: _host_conf.gen_pxe_host and inventory_hostname in groups['new']

    - name: pxe | Or delete config for installed host
      file:
        dest: "{{ _host_conf.pxe_cfg }}"
        state: absent
      register: pxe_hosts_deleted
      when: not _host_conf.gen_pxe_host or inventory_hostname in groups['installed']

    - name: pxe | Generate Hosts menu
      assemble:
        src: "{{ hosts_pxe_menu_cfg_d }}"
        regexp: "[0-9]_[^/]+\\.cfg$"
        dest: >-
          {{ hostvars[_pxe_server].pxe_root_path
              + '/' + hostvars[_pxe_server].pxelinux_incl_dir
              + '/' + hosts_pxe_menu_cfg
          }}
      when: force_overwrite or pxe_hosts_added.changed or pxe_hosts_deleted.changed

  when: inventory_hostname in groups['servers']
  delegate_to: "{{ _pxe_server }}"

- block:
    - name: pxe | Copy files used in pxelinux config
      copy:
        src:  "{{ item }}"
        dest: "{{ hostvars[_pxe_server].pxe_root_path + '/' + item | basename }}"
      loop:
        - "{{ pxe_menu_font }}"
        - "{{ pxe_splash }}"

    - name: pxe | Generate main pxelinux config
      template:
        src:  'pxelinux_cfg'
        dest: "{{ hostvars[_pxe_server].pxe_root_path + '/pxelinux.cfg/default' }}"
        force: yes
        backup: yes
      vars:
        pxe_menus: >-
          {{ pxe_os.values() | map(attribute='pxe_menu') | unique | list }}

  delegate_to: "{{ _pxe_server }}"

